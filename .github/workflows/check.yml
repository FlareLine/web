name: 'Check Terraform'
on:
  pull_request:
jobs:
  check-and-plan:
    name: 'Check Terraform'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: substitute backend endpoint
        run: |
          sed -i 's~%CLOUDFLARE_BACKEND_ENDPOINT%~${{ secrets.CLOUDFLARE_BACKEND_ENDPOINT }}~' backend.conf
          sed -i 's~%CLOUDFLARE_BACKEND_ACCESS_KEY%~${{ secrets.CLOUDFLARE_BACKEND_ACCESS_KEY }}~' backend.conf
          sed -i 's~%CLOUDFLARE_BACKEND_SECRET_KEY%~${{ secrets.CLOUDFLARE_BACKEND_SECRET_KEY }}~' backend.conf
      - name: terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: terraform init
        id: init
        run: terraform init -backend-config="backend.conf"
      - name: terraform validate
        id: validate
        run: terraform validate -no-color -backend-config="backend.conf"
      - name: terraform plan
        id: plan
        run: terraform plan -no-color -backend-config="backend.conf"
        env:
          TF_VAR_CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: 'terraform\n${{ steps.plan.outputs.stdout }}'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Terraform output')
            );
            const output = `
              **terraform fmt** - \`${{ steps.fmt.outcome }}\`
              **terraform init** - \`${{ steps.init.outcome }}\`
              **terraform validate** - \`${{ steps.validate.outcome }}\`
              **terraform plan** - \`${{ steps.plan.outcome }}\`

              <details><summary>terraform validate</summary>

              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`

              </details>

              <details><summary>terraform plan</summary>

              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`

              </details>

              *Author: @${{ github.actor }}, Action: \`${{ github.event_name }}\``;

              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output,
                });
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                });
              }